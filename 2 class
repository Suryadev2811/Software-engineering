def quadratic_solution(a, b, time, c):  
    discriminant = b**2 - 4*a*(c - time) 
    sol1 = (-b - discriminant**0.5) / (2*a)
    sol2 = (-b + discriminant**0.5) / (2*a)
    return sol1, sol2

def weather_model(mode):
    if mode == "hardcoded":
        a, b, c = 0.5, -2.0, 20.0
        for time in range(1, 4):
            temp = quadratic_solution(a, b, time, c)[1]
            print(f"Temperature at time {time}: {temp:.2f} degrees")
    elif mode == "input":
        a = float(input("Enter coefficient a: "))
        b = float(input("Enter coefficient b: "))
        c = float(input("Enter initial temperature: "))
        for time in range(1, 4):
            temp = quadratic_solution(a, b, time, c)[1]
            print(f"Temperature at time {time}: {temp:.2f} degrees")
    elif mode == "file":
        try:
            with open('spam.txt', 'r') as file:
                for set_num, line in enumerate(file):
                    try:
                        a, b, c = [float(value) for value in line.strip().split() if value]
                        print(f"Weather simulation for set {set_num + 1}:")
                        for time in range(1, 4):
                            temp = quadratic_solution(a, b, time, c)[1]
                            print(f"  Temperature at time {time}: {temp:.2f} degrees")
                    except ValueError:
                        print(f"Warning: Invalid data on line {set_num + 1}. Skipping.")
        except FileNotFoundError:
            print("Error: spam.txt not found.")
mode = input("Enter mode ('hardcoded', 'input', or 'file'): ").lower()
weather_model(mode)
